0a1,2
> # python [train.py](http://train.py/) --name baseline_augpp --model CustomModel --augmentation Augmentation_384 --lr 3e-3  —k_index 999
> 
4d5
< import multiprocessing
14c15,16
< from torch.optim.lr_scheduler import StepLR # *
---
> from torch import optim
> from torch.optim.lr_scheduler import *
18d19
< from dataset import MaskBaseDataset
20,21c21
< #
< 
---
> from utils import *
42c42
<     choices = random.choices(range(batch_size), k=n) if shuffle else list(range(n))
---
>     choices = random.sample(range(batch_size), k=n) if shuffle else list(range(n))
44,45c44,45
<     plt.subplots_adjust(top=0.8)  # cautions: hardcoded, 이미지 크기에 따라 top 를 조정해야 할 수 있습니다. T.T
<     n_grid = int(np.ceil(n ** 0.5))
---
>     plt.subplots_adjust(top=0.8)               # cautions: hardcoded, 이미지 크기에 따라 top 를 조정해야 할 수 있습니다. T.T
>     n_grid = np.ceil(n ** 0.5)
51,52c51,52
<         gt_decoded_labels = MaskBaseDataset.decode_multi_class(gt)
<         pred_decoded_labels = MaskBaseDataset.decode_multi_class(pred)
---
>         gt_decoded_labels = label_decoder(gt)
>         pred_decoded_labels = label_decoder(pred)
86c86,88
< def train(data_dir, model_dir, args):
---
> def train(model_dir, args):
>     
>     # -- seed 고정
96,98c98,105
<     dataset_module = getattr(import_module("dataset"), args.dataset)  # default: MaskBaseDataset
<     dataset = dataset_module(
<         data_dir=data_dir,
---
>     dataset_module = getattr(import_module("dataset"), args.dataset)  # default: CustomDataset
>     train_set = dataset_module(
>         args=args,
>         train=True
>     )
>     val_set = dataset_module(
>         args=args,
>         train=False
100d106
<     num_classes = dataset.num_classes  # 18
102,107c108,114
<     # -- augmentation
<     transform_module = getattr(import_module("dataset"), args.augmentation)  # default: BaseAugmentation
<     transform = transform_module(
<         resize=args.resize,
<         mean=dataset.mean,
<         std=dataset.std,
---
>     # -- augmentation 
>     transform_module = getattr(import_module("transform"), args.augmentation)  # default: Augmentation_384
>     train_transform = transform_module(
>         train=True
>     )    
>     val_transform = transform_module(
>         train=False
109c116,117
<     dataset.set_transform(transform)
---
>     train_set.set_transform(train_transform)    
>     val_set.set_transform(val_transform)
112c120
<     train_set, val_set = dataset.split_dataset()
---
>     # train_set, val_set = dataset.split_dataset()
117c125
<         num_workers=multiprocessing.cpu_count() // 2,
---
>         num_workers=3,
121c129
<     )
---
>     ) 
126c134
<         num_workers=multiprocessing.cpu_count() // 2,
---
>         num_workers=3,
129c137
<         drop_last=True,
---
>         drop_last=False,
134,136c142,150
<     model = model_module(
<         num_classes=num_classes
<     ).to(device)
---
> 
>     if args.model =='CustomModel_Arc':
>         model = model_module(
>             scale = args.arc_scale,
>             margin = args.arc_margin
>         ).to(device)
>     else:
>         model = model_module().to(device)
> 
138a153
> 
140c155,156
<     criterion = create_criterion(args.criterion)  # default: cross_entropy
---
>     criterion = create_criterion(args.criterion)  # default: focal_loss
> 
145c161,162
<         weight_decay=5e-4
---
>         momentum= 0.9,
>         weight_decay=5e-4,
147c164,168
<     scheduler = StepLR(optimizer, args.lr_decay_step, gamma=0.5)
---
>     #scheduler = StepLR(optimizer, args.lr_decay_step, gamma=0.5)
>     if args.scheduler == 'reducelr':
>         scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=10, threshold=0.002, min_lr=1e-4)
>     elif args.scheduler == 'cosine':
>         scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=10, eta_min=1e-4)
154a176
>     best_val_score = 0
168,169c190
<             outs = model(inputs)
<             preds = torch.argmax(outs, dim=-1)
---
>             outs = model(inputs, labels)
171d191
< 
174d193
< 
176,186d194
<             matches += (preds == labels).sum().item()
<             if (idx + 1) % args.log_interval == 0:
<                 train_loss = loss_value / args.log_interval
<                 train_acc = matches / args.batch_size / args.log_interval
<                 current_lr = get_lr(optimizer)
<                 print(
<                     f"Epoch[{epoch}/{args.epochs}]({idx + 1}/{len(train_loader)}) || "
<                     f"training loss {train_loss:4.4} || training accuracy {train_acc:4.2%} || lr {current_lr}"
<                 )
<                 logger.add_scalar("Train/loss", train_loss, epoch * len(train_loader) + idx)
<                 logger.add_scalar("Train/accuracy", train_acc, epoch * len(train_loader) + idx)
188,189d195
<                 loss_value = 0
<                 matches = 0
191c197,214
<         scheduler.step()
---
>             # train log
>             if (idx + 1) % args.log_interval == 0: 
>                 with torch.no_grad():
>                     preds = torch.argmax(outs, dim=-1)
>                     matches += (preds == labels).sum().item()
>                     train_loss = loss_value / args.log_interval
>                     train_acc = matches / args.batch_size / args.log_interval
>                     current_lr = get_lr(optimizer)
>                     print(
>                         f"Epoch[{epoch}/{args.epochs}]({idx + 1}/{len(train_loader)}) || "
>                         f"training loss {train_loss:4.4} || training accuracy {train_acc:4.2%} || lr {current_lr}"
>                     )
>                     logger.add_scalar("Train/loss", train_loss, epoch * len(train_loader) + idx)
>                     logger.add_scalar("Train/accuracy", train_acc, epoch * len(train_loader) + idx)
> 
>                     loss_value = 0
>                     matches = 0
> 
198a222,223
>             val_predicts = torch.empty(0)
>             val_targets = torch.empty(0)
199a225
> 
204a231,232
> 
>                 ### update val_predicts & val_targets
206a235,236
>                 val_predicts = torch.cat((val_predicts,preds.cpu()))
>                 val_targets = torch.cat((val_targets,labels.cpu()))
208c238
<                 loss_item = criterion(outs, labels).item()
---
>                 loss = criterion(outs, labels).item()
210c240
<                 val_loss_items.append(loss_item)
---
>                 val_loss_items.append(loss)
215c245
<                     inputs_np = dataset_module.denormalize_image(inputs_np, dataset.mean, dataset.std)
---
>                     inputs_np = denormalize_image(inputs_np, val_transform.mean, val_transform.std)
225c255
<                 torch.save(model.module.state_dict(), f"{save_dir}/best.pth")
---
>                 torch.save(model.module.state_dict(), f"{save_dir}/best_acc.pth")
227a258,267
> 
> 
>             ### print f1_score
>             score = get_f1_score(val_targets, val_predicts, verbose=True)
>             val_score = score['total']
>             if val_score > best_val_score:
>                 print(f"New best model for f1 score : {val_score:4.2}! saving the best model..")
>                 torch.save(model.module.state_dict(), f"{save_dir}/best_score.pth")
>                 best_val_score = val_score
>             torch.save(model.module.state_dict(), f"{save_dir}/last.pth")
230c270
<                 f"best acc : {best_val_acc:4.2%}, best loss: {best_val_loss:4.2}"
---
>                 f"best score : {best_val_score:4.2%}, best acc : {best_val_acc:4.2%}, best loss: {best_val_loss:4.2}"
233a274
>             logger.add_scalar("Val/f1_score", val_score, epoch)
236a278,282
>         # --- lr scheduler
>         if args.scheduler == 'reducelr':
>             scheduler.step(torch.tensor(val_loss))
>         elif args.scheduler == 'cosine':
>             scheduler.step()
240a287,292
>     from dotenv import load_dotenv
>     import os
>     load_dotenv(verbose=True)
> 
> 
> 
242,249c294,300
<     parser.add_argument('--seed', type=int, default=42, help='random seed (default: 42)')
<     parser.add_argument('--epochs', type=int, default=1, help='number of epochs to train (default: 1)')
<     parser.add_argument('--dataset', type=str, default='MaskBaseDataset', help='dataset augmentation type (default: MaskBaseDataset)')
<     parser.add_argument('--augmentation', type=str, default='BaseAugmentation', help='data augmentation type (default: BaseAugmentation)')
<     parser.add_argument("--resize", nargs="+", type=list, default=[128, 96], help='resize size for image when training')
<     parser.add_argument('--batch_size', type=int, default=64, help='input batch size for training (default: 64)')
<     parser.add_argument('--valid_batch_size', type=int, default=1000, help='input batch size for validing (default: 1000)')
<     parser.add_argument('--model', type=str, default='BaseModel', help='model type (default: BaseModel)')
---
>     parser.add_argument('--seed', type=int, default=1997, help='random seed (default: 1997)')
>     parser.add_argument('--epochs', type=int, default=40, help='number of epochs to train (default: 40)')
>     parser.add_argument('--dataset', type=str, default='CustomDataset', help='dataset augmentation type (default: CustomDataset)')
>     parser.add_argument('--augmentation', type=str, default='Augmentation_384', help='data augmentation type (default: Augmentation_384)')
>     parser.add_argument('--batch_size', type=int, default=128, help='input batch size for training (default: 128)')
>     parser.add_argument('--valid_batch_size', type=int, default=32, help='input batch size for validing (default: 32)')
>     parser.add_argument('--model', type=str, default='CustomModel_Arc', help='model type (default: CustomModel_Arc)')
251,253c302,304
<     parser.add_argument('--lr', type=float, default=1e-3, help='learning rate (default: 1e-3)')
<     parser.add_argument('--val_ratio', type=float, default=0.2, help='ratio for validaton (default: 0.2)')
<     parser.add_argument('--criterion', type=str, default='cross_entropy', help='criterion type (default: cross_entropy)')
---
>     parser.add_argument('--scheduler', type=str, default='reducelr', help='scheduler type (default: reducelr)')
>     parser.add_argument('--lr', type=float, default=3e-3, help='learning rate (default: 3e-3)')
>     parser.add_argument('--criterion', type=str, default='f1', help='criterion type (default: f1)')
255,256c306,313
<     parser.add_argument('--log_interval', type=int, default=20, help='how many batches to wait before logging training status')
<     parser.add_argument('--name', default='exp', help='model save at {SM_MODEL_DIR}/{name}')
---
>     parser.add_argument('--log_interval', type=int, default=20, help='how many batches to wait before logging training status (default: 20)')
>     parser.add_argument('--name', default='resnet18_arc', help='model save at {SM_MODEL_DIR}/{name}')
>     parser.add_argument('--arc_scale', type=float, default=30.0, help='arcface scale (default: 30.0)')
>     parser.add_argument('--arc_margin', type=float, default=0.4, help='arcface margin (default: 0.4)')
> 
>     # Dataset
>     parser.add_argument('--n_splits', type=int, default=5, help='number for K-Fold validation (default: 5)')
>     parser.add_argument('--k_index', type=int, default=4, help='number of K-Fold validation (default: 4)')
259c316
<     parser.add_argument('--data_dir', type=str, default=os.environ.get('SM_CHANNEL_TRAIN', '/opt/ml/input/data/train/images'))
---
>     parser.add_argument('--data_dir', type=str, default=os.environ.get('SM_CHANNEL_TRAIN', '/opt/ml/input/data/train/crop_images'))
260a318,319
>     parser.add_argument('--info_path', type=str, default=os.environ.get('SM_CHANNEL_TRAIN', '/opt/ml/input/data/train/train.csv'))
> 
264,265c323
< 
<     data_dir = args.data_dir
---
>     
268c326,334
<     train(data_dir, model_dir, args)
---
>     if not os.path.isdir(model_dir):
>         os.makedirs(model_dir)
> 
>     if not os.path.isdir('/opt/ml/input/data/train/crop_images/') or not os.path.isdir('/opt/ml/input/data/eval/crop_images/'):
>         from create_crop_images import create_crop_images
>         create_crop_images()
> 
> 
>     train(model_dir, args)
\ No newline at end of file
